@using System.Security.Claims

@{
	ViewData["Title"] = "ERP Szakdolgozat - Home";
	bool isAdmin = User.HasClaim(ClaimTypes.Role, "Admin");
	bool isHR = User.HasClaim(ClaimTypes.Role, "HR");
	bool isPM = User.HasClaim(ClaimTypes.Role, "ProjectManager");
	bool isTL = User.HasClaim(ClaimTypes.Role, "TeamLeader");
}

<div class="row">
	<h2 class="text-center text-bold" style="text-decoration: underline;">
		Good @ViewData["TimeOfDay"] @(ViewData["UserName"]).
	</h2>
	@await Component.InvokeAsync("UserStandardCheck", new { username = User.Identity.Name })

	@if (isAdmin || isHR)
	{
		<div class="col-md-12">
			<h3 class="text-center">Employee statistics</h3>
			<hr />
		</div>
		<div class="col-md-12 mb-lg">
			<canvas id="salaryChart" width="500" height="120"></canvas>
		</div>
	}

	@if (isAdmin || isPM)
	{
		<div class="col-md-12">
			<h3 class="text-center">Project statistics</h3>
			<hr />
		</div>
		<div class="col-md-8">
			<canvas id="hoursChart" width="400" height="210"></canvas>
		</div>
		<div class="col-md-4">
			<canvas id="remainingChart" width="200" height="200"></canvas>
		</div>
		<div class="col-md-12 mb-lg">
			<canvas id="revenueChart" width="400" height="150"></canvas>
		</div>
	}

	@if (isAdmin || isTL)
	{
		<div class="col-md-12">
			<h3 class="text-center">Forecast statistics</h3>
			<hr />
		</div>
		<div class="col-md-12 ">
			<canvas id="forecastChart" width="300" height="50"></canvas>
		</div>
	}
</div>

@section Scripts {
	<script>
		// Employees
		var salaries = @Html.Raw(Json.Serialize(ViewData["Salaries"]));

		var ctx = document.getElementById('salaryChart').getContext('2d');
		var salaryChart = new Chart(ctx, {
			type: 'line',
			data: {
				labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
				datasets: [{
					label: 'Average Salary',
					backgroundColor: 'rgba(50, 50, 255, 1)',
					borderColor: 'rgba(50, 50, 255, 1)',
					borderWidth: 1,
					data: salaries,
					fill: false
				}]
			},
			options: {
				scales: {
					yAxes: [{
						ticks: {
							beginAtZero: true
						}
					}]
				},
				animation: {
					animateScale: true,
					animateRotate: true
				}
			}
		});

		// Projects
		// 1st chart
		var done = @Html.Raw(Json.Serialize(ViewData["HoursDone"]));
		var total = @Html.Raw(Json.Serialize(ViewData["HoursTotal"]));

		var ctx = document.getElementById('hoursChart').getContext('2d');
		var hoursChart = new Chart(ctx, {
			type: 'bar',
			data: {
				labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
				datasets: [{
					label: 'Hours Done',
					backgroundColor: 'rgba(100, 140, 255, 0.5)',
					borderColor: 'rgba(100, 140, 255, 1)',
					borderWidth: 1,
					data: done
				}, {
					label: 'Hours Total (All Projects)',
					backgroundColor: 'rgba(0, 0, 255, 0.5)',
					borderColor: 'rgba(0, 0, 255, 1)',
					borderWidth: 1,
					data: total
				}]
			},
			options: {
				scales: {
					yAxes: [{
						ticks: {
							beginAtZero: true
						}
					}]
				},
				animation: {
					animateScale: true,
					animateRotate: true
				}
			}
		});

		// 2nd chart
		var remaining = @(ViewData["HoursRemaining"]);
		var all = @(ViewData["HoursAll"]);

		var ctx = document.getElementById('remainingChart').getContext('2d');
		var remainingChart = new Chart(ctx, {
			type: 'doughnut',
			data: {
				labels: ['Hours Remaining', 'All (All Projects)'],
				datasets: [{
					label: 'Hours Done',
					backgroundColor: ['rgba(255, 200, 100, 1)', 'rgba(220, 220, 220, 1)'],
					borderColor: 'rgba(255, 200, 100, 1)',
					borderWidth: 1,
					data: [remaining, all]
				}]
			},
			options: {
				animation: {
					animateScale: true,
					animateRotate: true
				}
			}
		});

		// 3rd chart
		var cost = @Html.Raw(Json.Serialize(ViewData["Cost"]));
		var revenue = @Html.Raw(Json.Serialize(ViewData["Revenue"]));
		var revenueGained = @Html.Raw(Json.Serialize(ViewData["RevenueGained"]));

		var ctx = document.getElementById('revenueChart').getContext('2d');
		var revenueChart = new Chart(ctx, {
			type: 'line',
			data: {
				labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
				datasets: [{
					label: 'Cost',
					backgroundColor: 'rgba(100, 0, 255, 1)',
					borderColor: 'rgba(100, 140, 255, 1)',
					borderWidth: 1,
					data: cost,
					fill: false
				}, {
					label: 'Revenue',
					backgroundColor: 'rgba(255, 0, 0, 1)',
					borderColor: 'rgba(255, 0, 0, 1)',
					borderWidth: 1,
					data: revenue,
					fill: false
				}, {
					label: 'Revenue Gained (All Projects)',
					backgroundColor: 'rgba(255, 150, 50, 1)',
					borderColor: 'rgba(255, 150, 50, 1)',
					borderWidth: 1,
					data: revenueGained,
					fill: false
				}]
			},
			options: {
				scales: {
					yAxes: [{
						ticks: {
							beginAtZero: true
						}
					}]
				},
				animation: {
					animateScale: true,
					animateRotate: true
				}
			}
		});

		// Forecasts
		var avaHours = @Html.Raw(Json.Serialize(ViewData["AvailableHours"]));
		var totalHours = @Html.Raw(Json.Serialize(ViewData["TotalHours"]));

		var ctx = document.getElementById('forecastChart').getContext('2d');
		var forecastChart = new Chart(ctx, {
			type: 'bar',
			data: {
				labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
				datasets: [{
					label: 'Available Hours',
					backgroundColor: 'rgba(0, 255, 100, 0.5)',
					borderColor: 'rgba(0, 255, 100, 0.5)',
					borderWidth: 1,
					data: avaHours,
					fill: false
				}, {
					label: 'Total Hours',
					backgroundColor: 'rgba(0, 100, 255, 0.5)',
					borderColor: 'rgba(0, 100, 255, 0.5)',
					borderWidth: 1,
					data: totalHours,
					fill: false
				}]
			},
			options: {
				scales: {
					yAxes: [{
						ticks: {
							beginAtZero: true
						}
					}]
				},
				animation: {
					animateScale: true,
					animateRotate: true
				}
			}
		});
	</script>
}